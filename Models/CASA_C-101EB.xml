<?xml version="1.0"?>

<!--
    CASA C-101_Aviojet for FlightGear flight simulator
    Copyright (C) 2013  Pavel Cueto, Fernando Espinosa
    
    Updated 2020 by Warty (John Bray)

This program is free software; you can redistribute it and/or modify 
it under the terms of the GNU General Public License as published by 
the Free Software Foundation; either version 3 of the License, or 
(at your option) any later version. 

This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
GNU General Public License for more details. 

You should have received a copy of the GNU General Public License 
along with this program; if not, write to the Free Software 
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
-->

<PropertyList>
  <!-- base airframe includes animated instruments/cockpit -->
  <foo include="CASA_C-101_common.xml" omit-node="y" />

  <!--model>
	<path>Aircraft/C-101/Models/Instruments/C-101EB-instruments.xml</path>
  </model-->

  <model>
	<path>Aircraft/C-101/Models/C-101_EB-BB_details.xml</path>
  </model>
  <model><!-- Humo acrobatico -->
	<path>Aircraft/C-101/Models/Smoke_dispenser.xml</path>
  </model>

  <nasal>
	<load>
		<![CDATA[
		# standard livery call

		var livery_update = aircraft.livery_update.new("Aircraft/C-101/Models/Liveries_C-101EB");

		# property mirring functions - originated in tomaskoms lighting code

		var root = cmdarg();
		var rootindex = root.getIndex();
		var mpPath = "/ai/models/multiplayer["~ rootindex ~"]/";
		
		# I need to set listener on some MP transferred properties; this doesn't seem to work well sometimes, 
		# so I mirror them to the original location on any change
		# This also simplifies work as I can use almost the same code for MP as is the local Nasal. 
		# Furthermore, I can use meaningful property names in the model XML files instead of referencing the MP properties. 
		var mpVar = {
        		new: func(propIn, propOut) {
                		var m = { parents: [mpVar] };
                		m.propIn = propIn;
                		m.propOut = propOut;
                		if(propIn==nil or propOut==nil) return m;
                		m.value = getprop(propIn);
                		setprop(propOut, m.value);
                		return m;
        		},
        		check: func {
                		if(me.propIn==nil or me.propOut==nil) return;
                		var newValue = getprop(me.propIn);
                		if(newValue != me.value) {
                        		setprop(me.propOut, newValue);
                        		me.value = newValue;
                        		#print("value of "~me.propOut~" changed: "~newValue);
                		}
        		},
		};

		#init any property copy object needed in this array (anything you need to transfer over MP, but you are using the original paths in your xmls)
		#also used for properties you are using a listener on, or properties which you maybe want to manipulate during the <unload> 
		#if you're just using the pack, change the values according to the MP bindings in the -set.xml file
		#you don't need to delete the entries if the path is nil - it gets skipped automatically and the MP path is just ignored
		#
		# yes you do need to comment out entries is the path is nil - enrogue
		var mirrorValues = [
		# preserving original lights properties in case we use them
		#mpVar.new(mpPath~"sim/multiplay/generic/int[7]", mpPath~"sim/crashed"),
		#mpVar.new(mpPath~"sim/multiplay/generic/int[4]", navSwitch),
		#mpVar.new(mpPath~"sim/multiplay/generic/int[1]", beaconSwitch),
		#mpVar.new(mpPath~"sim/multiplay/generic/int[1]", strobeSwitch),
		#mpVar.new(mpPath~"sim/multiplay/generic/int[2]", landingSwitch),
		#mpVar.new(mpPath~"sim/multiplay/generic/int[3]", taxiSwitch),
		#mpVar.new(mpPath~"sim/multiplay/generic/int[3]", probeSwitch),
		#mpVar.new(mpPath~"sim/multiplay/generic/int[0]", whiteSwitch),
		#mpVar.new(mpPath~"sim/multiplay/generic/int[8]", searchSwitch),
		mpVar.new(mpPath~"sim/multiplay/generic/int[11]",mpPath~"controls/armament/smoke"),
		mpVar.new(mpPath~"sim/multiplay/generic/float[0]",mpPath~"controls/door[0]"),
		mpVar.new(mpPath~"sim/multiplay/generic/float[1]",mpPath~"controls/door[1]"),
		mpVar.new(mpPath~"sim/multiplay/generic/float[2]",mpPath~"controls/door[2]"),
		];
		
		#loop at the default MP transfer frequency (10Hz)
		var mirrorTimer = maketimer(0.1, func {
        		foreach(var mir; mirrorValues) {
                		mir.check();
        		}
		});
		mirrorTimer.start();

		]]>
	</load>
	<unload>
		<![CDATA[
		#stop livery update

		livery_update.stop();

		#prevent multiple timers and listeners from running and fighting on next connect
		#cleanly destroy MP property mirroring

		mirrorTimer.stop();
		mirrorTimer = nil;
		mirrorValues = nil;

		]]>
	</unload>
  </nasal>

  <effect><!-- SHADERS -->
	<inherits-from>Aircraft/C-101/Models/Effects/reflect-bump-spec_shiny</inherits-from>
		<object-name>Ala_DER</object-name>
		<object-name>Ala_IZQ</object-name>
		<object-name>Aleron_DER</object-name>
		<object-name>Aleron_IZQ</object-name>
		<object-name>CompTren_DEL_DER</object-name>
		<object-name>CompTren_DEL_IZQ</object-name>
		<object-name>CompTren_DER_01</object-name>
		<object-name>CompTren_DER_02</object-name>
		<object-name>CompTren_DER_03</object-name>
		<object-name>CompTren_IZQ_01</object-name>
		<object-name>CompTren_IZQ_02</object-name>
		<object-name>CompTren_IZQ_03</object-name>
		<object-name>Compuerta_01</object-name>
		<object-name>Compuerta_02</object-name>
		<object-name>Elevador_DER_01</object-name>
		<object-name>Elevador_DER_02</object-name>
		<object-name>Elevador_IZQ_01</object-name>
		<object-name>Elevador_IZQ_02</object-name>
		<object-name>Estab_Horizontal_1</object-name>
		<object-name>Flap_DER</object-name>
		<object-name>Flap_IZQ</object-name>
		<object-name>Fuselaje_A</object-name>
		<object-name>Fuselaje_B</object-name>
		<object-name>Spoiler_01</object-name>
		<object-name>Spoiler_02_DER</object-name>
		<object-name>Spoiler_02_IZQ</object-name>
		<object-name>Timon_01</object-name>
		<object-name>Timon_02</object-name>
  </effect>

</PropertyList>
